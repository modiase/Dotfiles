#!/usr/bin/env -S bash -eu

LOG_LEVEL=2
MAX_CORES=$(($(nproc) - 1))
COLOR_ENABLED=true

show_usage() {
    local exit_code=${1:-0}
    cat <<EOF
Usage: $0 [-h] [-l LEVEL] [-c CORES]

Activate dotfiles configuration for Darwin or NixOS systems.

Options:
    -h           Show this help message
    -l LEVEL     Set log level (default: 2)
                1 = minimal output (errors and completion only)
                2 = show stdout from rebuild processes
                3+ = enable debug mode (set -x)
    -c CORES     Set max cores for parallel builds (default: $(nproc) - 1)

Examples:
    $0           # Activate with minimal output
    $0 -l 2      # Show rebuild process output
    $0 -l 3      # Enable debug mode
    $0 -c 4      # Use 4 cores for builds
    $0 -h        # Show this help

The script will:
- Update Darwin/NixOS system configuration
- Update home-manager configuration
- Use $(nproc) - 1 cores for parallel builds by default

All output is timestamped and colorized when possible.
EOF
    exit "$exit_code"
}

while getopts "hl:c:" opt; do
    case $opt in
        h)
            show_usage 0
            ;;
        l)
            if [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                LOG_LEVEL=$OPTARG
            else
                echo "Error: -l requires a positive integer" >&2
                show_usage 1
            fi
            ;;
        c)
            if [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                MAX_CORES=$OPTARG
            else
                echo "Error: -c requires a positive integer" >&2
                show_usage 1
            fi
            ;;
        \?)
            show_usage 1
            ;;
    esac
done

shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
    echo "Unknown arguments: $*" >&2
    show_usage 1
fi

if [ "$LOG_LEVEL" -ge 3 ]; then
    set -x
fi

set -o pipefail
export NIX_CONFIG="experimental-features = nix-command flakes"

COLOR_ENABLED=${COLOR_ENABLED:-true}
LOGGING_NO_PREFIX=${LOGGING_NO_PREFIX:-0}
REPO_ROOT="$(git rev-parse --show-toplevel)"
source "$REPO_ROOT/lib/lib.sh"

if [ "$(uname -s)" = "Darwin" ]; then
    curl --proto '=https' --tlsv1.2 -sSf -L https://github.com/NixOS/nix/raw/master/scripts/sequoia-nixbld-user-migration.sh | bash - >/dev/null 2>&1 || true
fi

if [ -e "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]; then
    . "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
fi
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

for cmd in git nix; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        log_error "Required command '$cmd' not found."
        log_error "Please ensure git and nix are installed and in your PATH."
        exit 1
    fi
done

OS=$(uname -s)
ARCH=$(uname -m)

case "$OS" in
    "Darwin")
        if ! command -v darwin-rebuild >/dev/null 2>&1; then
            log_info "Installing nix-darwin..."
            REBUILD_CMD="nix run nix-darwin/master#darwin-rebuild --"
        else
            log_info "Updating nix-darwin configuration..."
            REBUILD_CMD="darwin-rebuild"
        fi
        if ! run_logged "darwin-rebuild" "$COLOR_WHITE" sudo NIX_CONFIG="experimental-features = nix-command flakes" "$REBUILD_CMD" switch --flake . --max-jobs "$MAX_CORES" --cores "$MAX_CORES"; then
            exit 1
        fi
        HOME_MANAGER_TARGET="moye-aarch64-darwin"
        ;;
    "Linux")
        if [ -f /etc/NIXOS ]; then
            log_info "Updating NixOS configuration..."
            if ! run_logged "nixos-rebuild" "$COLOR_WHITE" sudo nixos-rebuild switch --flake . --max-jobs "$MAX_CORES" --cores "$MAX_CORES"; then
                exit 1
            fi
        fi

        case "$ARCH" in
            "aarch64" | "arm64") HOME_MANAGER_TARGET="moye-aarch64-linux" ;;
            "x86_64") HOME_MANAGER_TARGET="moye-x86_64-linux" ;;
            *)
                log_error "Unsupported Linux architecture '$ARCH'"
                exit 1
                ;;
        esac
        ;;
    *)
        log_error "Unsupported operating system '$OS'"
        exit 1
        ;;
esac

if ! run_logged "home-manager" "$COLOR_WHITE" nix shell nixpkgs#home-manager -c home-manager switch -b backup --flake .#$HOME_MANAGER_TARGET; then
    exit 1
fi

log_success "Configuration updated successfully!"
