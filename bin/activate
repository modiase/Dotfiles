#!/usr/bin/env -S bash -eu

LOG_LEVEL=1
MAX_CORES=$(($(nproc) - 1))
COLOR_ENABLED=true

show_usage() {
    local exit_code=${1:-0}
    cat << EOF
Usage: $0 [-h] [-l LEVEL] [-c CORES]

Activate dotfiles configuration for Darwin or NixOS systems.

Options:
    -h           Show this help message
    -l LEVEL     Set log level (default: 1)
                1 = minimal output (errors and completion only)
                2 = show stdout from rebuild processes
                3+ = enable debug mode (set -x)
    -c CORES     Set max cores for parallel builds (default: $(nproc) - 1)

Examples:
    $0           # Activate with minimal output
    $0 -l 2      # Show rebuild process output
    $0 -l 3      # Enable debug mode
    $0 -c 4      # Use 4 cores for builds
    $0 -h        # Show this help

The script will:
- Update Darwin/NixOS system configuration
- Update home-manager configuration
- Use $(nproc) - 1 cores for parallel builds by default

All output is timestamped and colorized when possible.
EOF
    exit $exit_code
}

while getopts "hl:c:" opt; do
    case $opt in
        h)
            show_usage 0
            ;;
        l)
            if [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                LOG_LEVEL=$OPTARG
            else
                echo "Error: -l requires a positive integer" >&2
                show_usage 1
            fi
            ;;
        c)
            if [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                MAX_CORES=$OPTARG
            else
                echo "Error: -c requires a positive integer" >&2
                show_usage 1
            fi
            ;;
        \?)
            show_usage 1
            ;;
    esac
done

shift $((OPTIND-1))

if [ $# -ne 0 ]; then
    echo "Unknown arguments: $*" >&2
    show_usage 1
fi

if [ $LOG_LEVEL -ge 3 ]; then
    set -x
fi

set -o pipefail
export NIX_CONFIG="experimental-features = nix-command flakes"

COLOR_RESET='\033[0m'
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_BLUE='\033[0;34m'
COLOR_CYAN='\033[0;36m'

colorize() {
    local color=$1
    local text=$2

    if [ "$COLOR_ENABLED" = "true" ]; then
        echo -e "${color}${text}${COLOR_RESET}"
    else
        echo "$text"
    fi
}

log_info() {
    if [ $LOG_LEVEL -ge 1 ]; then
        colorize "$COLOR_CYAN" "$1"
    fi
}

log_error() {
    colorize "$COLOR_RED" "$1" >&2
}

log_success() {
    if [ $LOG_LEVEL -ge 1 ]; then
        colorize "$COLOR_GREEN" "$1"
    fi
}

process_output() {
    local prefix=$1
    local color=$2

    while IFS= read -r line; do
        if [ $LOG_LEVEL -ge 2 ]; then
            timestamp=$(date '+%H:%M:%S')
            formatted_line="[$timestamp] [$prefix] $line"
            colorize "$color" "$formatted_line"
        fi
    done
}

if [ "$(uname -s)" = "Darwin" ]; then
    curl --proto '=https' --tlsv1.2 -sSf -L https://github.com/NixOS/nix/raw/master/scripts/sequoia-nixbld-user-migration.sh | bash - >/dev/null 2>&1 || true
fi

if [ -e "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]; then
    . "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
fi
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

for cmd in git nix; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        log_error "Required command '$cmd' not found."
        log_error "Please ensure git and nix are installed and in your PATH."
        exit 1
    fi
done

OS=$(uname -s)
ARCH=$(uname -m)

case "$OS" in
    "Darwin")
        if ! command -v darwin-rebuild >/dev/null 2>&1; then
            log_info "Installing nix-darwin..."
            REBUILD_CMD="nix run nix-darwin/master#darwin-rebuild --"
        else
            log_info "Updating nix-darwin configuration..."
            REBUILD_CMD="darwin-rebuild"
        fi
        if ! sudo NIX_CONFIG="experimental-features = nix-command flakes" $REBUILD_CMD switch --flake . --max-jobs $MAX_CORES --cores $MAX_CORES 2>&1 | process_output "darwin-rebuild" "$COLOR_BLUE"; then
            log_error "Darwin configuration update failed!"
            exit 1
        fi
        HOME_MANAGER_TARGET="moye-aarch64-darwin"
        ;;
    "Linux")
        if [ -f /etc/NIXOS ]; then
            log_info "Updating NixOS configuration..."
            if ! sudo nixos-rebuild switch --flake . --max-jobs $MAX_CORES --cores $MAX_CORES 2>&1 | process_output "nixos-rebuild" "$COLOR_BLUE"; then
                log_error "NixOS configuration update failed!"
                exit 1
            fi
        fi

        case "$ARCH" in
            "aarch64"|"arm64") HOME_MANAGER_TARGET="moye-aarch64-linux" ;;
            "x86_64") HOME_MANAGER_TARGET="moye-x86_64-linux" ;;
            *) log_error "Unsupported Linux architecture '$ARCH'"; exit 1 ;;
        esac
        ;;
    *) log_error "Unsupported operating system '$OS'"; exit 1 ;;
esac

log_info "Updating home-manager configuration..."
if ! nix shell nixpkgs#home-manager -c home-manager switch -b backup --flake .#$HOME_MANAGER_TARGET 2>&1 | process_output "home-manager" "$COLOR_GREEN"; then
    log_error "Home-manager configuration update failed!"
    exit 1
fi

log_success "Configuration updated successfully!"
